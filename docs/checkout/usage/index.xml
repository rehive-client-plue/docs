<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Usage on Documentation</title>
    <link>https://plue.io/checkout/usage/</link>
    <description>Recent content in Usage on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Sep 2018 15:21:22 +0200</lastBuildDate>
    
	<atom:link href="https://plue.io/checkout/usage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Authorization</title>
      <link>https://plue.io/checkout/usage/authorization/</link>
      <pubDate>Mon, 17 Sep 2018 15:21:22 +0200</pubDate>
      
      <guid>https://plue.io/checkout/usage/authorization/</guid>
      <description>The API uses a token-based HTTP Authentication scheme.
Once a user has logged in and received a token, each subsequent request should include the token in the HTTP Authorization header. Tokens expire 10 hours after creation. Once a token has expired, login is required in order to re-authenticate.
Authorization Header When making requests, the API key should be included as a token in the Authorization header:
Authorization: Token {token}  You must replace {token} with your API token.</description>
    </item>
    
    <item>
      <title>Errors</title>
      <link>https://plue.io/checkout/usage/errors/</link>
      <pubDate>Mon, 17 Sep 2018 15:21:22 +0200</pubDate>
      
      <guid>https://plue.io/checkout/usage/errors/</guid>
      <description>When an error occurs in the platform it returns a HTTP response containing two things:
 body (formatted in JSON) containing a message and status and HTTP response code  The JSON error response always includes a message string. If an error occurred as a result of a specific attribute or key the error details will be outputted in the data object.
Errors will be formatted in one of two ways.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://plue.io/checkout/usage/pagination/</link>
      <pubDate>Mon, 17 Sep 2018 15:21:22 +0200</pubDate>
      
      <guid>https://plue.io/checkout/usage/pagination/</guid>
      <description>On listing pages, the API provides a way to paginate results. The default pagination method offered by the API is offset pagination, which allows navigation to an arbitrary point in a list of results as well as via next and prevattributes. The JSON format returned on paginated listing pages looks like this:
{ &amp;quot;status&amp;quot;: &amp;quot;success&amp;quot;, &amp;quot;data&amp;quot;: { &amp;quot;count&amp;quot;: 1, &amp;quot;next&amp;quot;: null, &amp;quot;previous&amp;quot;: null, &amp;quot;results&amp;quot;: [] } }  The default page size is 15 but can be changed by adding a page_size query parameter to the request URL.</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>https://plue.io/checkout/usage/filters/</link>
      <pubDate>Mon, 17 Sep 2018 15:21:22 +0200</pubDate>
      
      <guid>https://plue.io/checkout/usage/filters/</guid>
      <description>The API provides a way to filter and/or sort on listing pages. All filtering and sorting is done via query parameters in the GET request.
To filter by a field, include it in the URL as a standard query parameter with a ? delimiting the URL and the start of the query parameters and a &amp;amp; between each filtered field. This can be seen below:
curl https://api.plue.io/3/admin/transactions/?status=complete&amp;amp;tx_type=debit&amp;amp;orderby=created -X GET -H &amp;quot;Authorization: Token {token}&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot;  To sort results, an endpoint will often also include an optional orderby query parameter.</description>
    </item>
    
    <item>
      <title>Idempotency</title>
      <link>https://plue.io/checkout/usage/idempotency/</link>
      <pubDate>Mon, 17 Sep 2018 15:21:22 +0200</pubDate>
      
      <guid>https://plue.io/checkout/usage/idempotency/</guid>
      <description>The API supports idempotent requests for ensuring the same operations never occur twice.
To perform an idempotent request, attach a unique key to any POST, PUT or PATCH request made to the API: via the Idempotency-Key: {key} header:
curl {url} -X GET -H &amp;quot;Idempotency-Key: {key}&amp;quot; -H &amp;quot;Authorization: Token {token}&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot;  API requests made with a new key will get saved along with their HTTP response. Follow up requests made with the same key will always return the same response (As long as the request has the same HTTP method and URL path).</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://plue.io/checkout/usage/events/</link>
      <pubDate>Mon, 17 Sep 2018 15:21:22 +0200</pubDate>
      
      <guid>https://plue.io/checkout/usage/events/</guid>
      <description>The platform has a collection of internal events that can be configured to trigger webhooks.
Webhooks should always be created with a secure secret key. The secret key can be used to identify valid requests to your server. The secret is sent in the Authorization header of the webhook request.
The platform expects a 200 OK HTTP response when webhooks are called. If a 200 response is not returned, the platform will retry the webhook up to 12 times with a gradually increasing delay between each retry.</description>
    </item>
    
  </channel>
</rss>